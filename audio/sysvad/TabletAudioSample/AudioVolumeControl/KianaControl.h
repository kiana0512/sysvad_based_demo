#pragma once
//
// KianaControl.h —— 用户态/内核态共用的 IOCTL 定义（内核友好版）
// 只依赖 <devioctl.h>，严禁包含 <winioctl.h>。
// 
#include <ntddk.h>
#include <devioctl.h>   // 内核态 CTL_CODE 定义（替代 winioctl.h）

// 独立的设备类型（避免与系统设备冲突，取 0x8000~0xFFFF 区间）
#define FILE_DEVICE_KIANA_AUDIO  0x9C40

// ===== 基础控制 =====
#define IOCTL_KIANA_GET_VERSION    CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x800, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KIANA_SET_VOLUME     CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x801, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KIANA_GET_VOLUME     CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x802, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KIANA_MUTE           CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x803, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KIANA_UNMUTE         CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x804, METHOD_BUFFERED, FILE_ANY_ACCESS)

// ===== EQ 系数（12 段 biquad，Q15）=====
#define IOCTL_KIANA_SET_EQ_BIQUAD  CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x810, METHOD_BUFFERED, FILE_ANY_ACCESS)
#define IOCTL_KIANA_GET_EQ_BIQUAD  CTL_CODE(FILE_DEVICE_KIANA_AUDIO, 0x811, METHOD_BUFFERED, FILE_ANY_ACCESS)

// （可选）如果你有与 IOCTL 一起下发的固定结构体放在这里；
// EQ 的大结构我们已放在 AudioEQTypes.h 里，就不重复定义。
